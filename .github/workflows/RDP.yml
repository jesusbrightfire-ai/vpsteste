name: RDP

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "no existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Fixed Password
        run: |
          $username = "RDP"
          $passwordPlain = "@vps123"
          $securePass = ConvertTo-SecureString $passwordPlain -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            net user $username $passwordPlain
          } else {
            New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -Description "RDP user created by workflow"
          }

          Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue

          "RDP_USER=$username" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RDP_PASS=$passwordPlain" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          Start-Process -FilePath "$env:ProgramFiles\Tailscale\tailscaled.exe"
          Start-Sleep -Seconds 5
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-runner-$env:GITHUB_RUN_ID" --accept-dns=false

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) -join ";"
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) { exit 1 }
          "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Verify RDP Accessibility
        run: |
          $targetIP = $env:TAILSCALE_IP -split ';' | Select-Object -First 1
          $testResult = Test-NetConnection -ComputerName $targetIP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) { exit 1 }

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "==================`n"
          for ($i = 0; $i -lt 2040; $i++) {
            Write-Host "[$(Get-Date)] RDP Active - Loop $i"
            Start-Sleep -Seconds 10
          }

  auto-restart:
    runs-on: windows-latest
    needs: secure-rdp
    steps:
      - name: Auto-Restart Same Run (No Duplication)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        run: |
          while ($true) {
            Write-Host "⏳ Aguardando antes de reiniciar..."
            # tempo de espera — 60s para teste / 20400s (~5h40min) para produção
            Start-Sleep -Seconds 60

            Write-Host "♻️ Reexecutando workflow atual (sem nova execução)..."
            $url = "https://api.github.com/repos/$env:REPO/actions/runs/$env:RUN_ID/rerun"
            $headers = @{
              "Accept" = "application/vnd.github+json"
              "Authorization" = "Bearer $env:GH_TOKEN"
            }

            try {
              Invoke-RestMethod -Uri $url -Method Post -Headers $headers
              Write-Host "✅ Workflow reexecutado com sucesso (mesma execução)!"
              break
            } catch {
              Write-Host "❌ Falha ao reexecutar: $($_.Exception.Message)"
              Start-Sleep -Seconds 30
            }
          }
