name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force -ErrorAction Stop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force -ErrorAction Stop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force -ErrorAction Stop

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "no existing rule"

          # Allow incoming RDP on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart Remote Desktop Service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Allow blank passwords for network/remote logon (risky)
        run: |
          Write-Host "⚠️ Ajustando política para permitir senhas em branco (LimitBlankPasswordUse = 0)."
          try {
            # This registry key controls "Accounts: Limit local account use of blank passwords to console logon only"
            New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" -ErrorAction Stop | Out-Null
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" -Name "LimitBlankPasswordUse" -Value 0 -Type DWord -Force -ErrorAction Stop
            Write-Host "✅ Registro ajustado (LimitBlankPasswordUse = 0)."
          } catch {
            Write-Host "⚠️ Falha ao ajustar registro: $_. Continuando sem falhar o job."
          }

          # Tentar forçar refresh da política local se o comando estiver disponível, mas não falhar se não funcionar.
          try {
            $proc = Start-Process -FilePath secedit -ArgumentList '/refreshpolicy machine_policy /enforce' -NoNewWindow -Wait -PassThru -ErrorAction Stop
            if ($proc.ExitCode -eq 0) {
              Write-Host "✅ secedit refresh executado com sucesso."
            } else {
              Write-Host "⚠️ secedit retornou código $($proc.ExitCode). Continuando (não irá falhar o workflow)."
            }
          } catch {
            Write-Host "⚠️ secedit não disponível ou falhou: $_. Continuando sem falhar o job."
          }

          Write-Host "OBS: pode ser necessário reiniciar a VM/runner para efeito completo."

      - name: Create RDP User WITHOUT Password (no prompt)
        run: |
          $username = "RDP"

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Write-Host "Local user '$username' already exists."
          } else {
            Write-Host "Criando usuário local '$username' SEM senha..."
            # Tentativa com -NoPassword (funciona em alguns sistemas)
            try {
              New-LocalUser -Name $username -NoPassword -AccountNeverExpires -Description "RDP user (no password) created by workflow" -ErrorAction Stop
              Write-Host "User criado com -NoPassword."
            } catch {
              Write-Host "Fallback: criando usuário com SecureString vazio (alguns sistemas podem não aceitar senha vazia)."
              try {
                $empty = ConvertTo-SecureString "" -AsPlainText -Force
                New-LocalUser -Name $username -Password $empty -AccountNeverExpires -Description "RDP user (empty password) created by workflow" -ErrorAction Stop
                Write-Host "User criado com SecureString vazio."
              } catch {
                Write-Host "⚠️ Não foi possível criar usuário sem senha: $_. O workflow continuará, mas o usuário pode não existir."
              }
            }
          }

          # Garantir que o usuário esteja habilitado e nos grupos necessários
          try { Enable-LocalUser -Name $username -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue } catch {}

          # Export to env for later steps (password intentionally blank)
          "RDP_USER=$username" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RDP_PASS=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Host "✅ User '$username' configurado (sem senha, quando suportado)."

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "✅ Tailscale installed successfully."

      - name: Establish Tailscale Connection
        run: |
          Write-Host "Starting Tailscale service..."
          Start-Process -FilePath "$env:ProgramFiles\Tailscale\tailscaled.exe"
          Start-Sleep -Seconds 5

          Write-Host "Connecting to Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-runner-$env:GITHUB_RUN_ID" --accept-dns=false

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) -join ";"
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "❌ Tailscale IP not assigned. Exiting."
              exit 1
          }

          "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "✅ Tailscale connected! IP: $tsIP"

      - name: Verify RDP Accessibility
        r
