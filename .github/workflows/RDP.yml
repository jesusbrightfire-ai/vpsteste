name: Secure RDP Access

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 90

    steps:
      - name: Establish Tailscale Connection
        run: |
          Write-Host "🔗 Conectando ao Tailscale..."
          curl -fsSL https://tailscale.com/install.ps1 | powershell
          tailscale up --authkey=${{ secrets.TAILSCALE_AUTHKEY }} --hostname=github-rdp

      - name: Verify RDP Accessibility
        run: |
          Write-Host "✅ Verificando conectividade RDP..."
          Test-NetConnection -ComputerName localhost -Port 3389

      - name: Maintain Connection
        run: |
          Write-Host "=== RDP ACCESS ==="
          Write-Host "Address: 100.125.211.73"
          Write-Host "Username: RDP"
          Write-Host "Password: @vps123"
          Write-Host "=================="

          # Aqui é o loop que mantém a conexão "ativa" (mantendo a sessão RDP viva)
          for ($i = 0; $i -lt 10; $i++) {
            Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP Active - Loop $i"
            Start-Sleep -Seconds 60  # <-- AQUI VOCÊ ALTERA O TEMPO ENTRE OS LOOPS (ex: 60 = 1 minuto)
          }

  auto-restart:
    needs: secure-rdp
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
      - name: Infinite Auto-Restart Loop
        shell: pwsh
        run: |
          while ($true) {
            Write-Host "⏳ Aguardando antes de reiniciar..."
            Start-Sleep -Seconds $env:RESTART_DELAY_SECONDS

            Write-Host "🚀 Reiniciando workflow (cancelando e reiniciando o job secure-rdp)..."

            # Cancela o workflow atual
            $headers = @{
              "Accept" = "application/vnd.github+json"
              "Authorization" = "Bearer $env:PERSONAL_TOKEN"
            }

            $runs = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=1" -Headers $headers
            $run_id = $runs.workflow_runs[0].id

            Write-Host "🛑 Cancelando workflow atual ID: $run_id"
            Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id/cancel" -Method Post -Headers $headers

            # Espera um pouco pra garantir que cancelou
            Start-Sleep -Seconds 15

            # Reinicia o workflow
            $workflowFile = "${{ github.workflow }}.yml"
            $body = @{ ref = "${{ github.ref }}" } | ConvertTo-Json
            Write-Host "🔁 Reiniciando workflow: $workflowFile"
            Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflowFile/dispatches" -Method Post -Headers $headers -Body $body

            Write-Host "✅ Workflow reiniciado com sucesso! Aguardando novo ciclo..."
          }
        env:
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          RESTART_DELAY_SECONDS: 60  # <-- AQUI VOCÊ AJUSTA O INTERVALO PARA REINICIAR O WORKFLOW (em segundos)
