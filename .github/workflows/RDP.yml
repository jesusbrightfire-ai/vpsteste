name: RDP

on:
  workflow_dispatch:

jobs:
  create-rdp-vps:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Checando o reposit√≥rio...
        uses: actions/checkout@v4

      - name: Habilitando RDP...
        shell: pwsh
        run: |
          Write-Host "==> Enabling RDP..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name fDenyTSConnections -Value 0
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Write-Host "‚úÖ RDP Habilitado com sucesso!"

      - name: Criando usu√°rio RDP...
        shell: pwsh
        run: |
          Write-Host "==> Creating user without password..."
          $user = "RDP"
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
            net user $user /add /y
          }
          net localgroup "Administrators" $user /add
          net localgroup "Remote Desktop Users" $user /add
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "AutoAdminLogon" /t REG_SZ /d "1" /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "DefaultUserName" /t REG_SZ /d "$user" /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "DefaultPassword" /t REG_SZ /d "" /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Lsa" /v "LimitBlankPasswordUse" /t REG_DWORD /d 0 /f
          "RDP_USER=$user" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "‚úÖ Usu√°rio criado: $user (n√£o √© necess√°rio senha)"

      - name: Instalando o tailscale na VPS...
        shell: pwsh
        run: |
          Write-Host "==> Installing Tailscale..."
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $file = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $file
          Start-Process msiexec.exe -ArgumentList "/i `"$file`" /quiet /norestart" -Wait
          Write-Host "‚úÖ Taiscale instalado com sucesso!"

      - name: Conectando ao tailscale...
        shell: pwsh
        run: |
          & "$env:ProgramFiles\Tailscale\tailscaled.exe" start-service
          Start-Sleep -Seconds 5
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-runner-${{ github.run_id }}"
          $ip = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) | Select-Object -First 1
          if (-not $ip) { Write-Error "Failed to obtain Tailscale IP"; exit 1 }
          "TAILSCALE_IP=$ip" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "‚úÖ Tailscale conectado com sucesso!"

      - name: Instalando 7-Zip...
        shell: pwsh
        run: |
          Write-Host "==> Installing 7-Zip..."
          $url = "https://www.7-zip.org/a/7z2301-x64.msi"
          $file = "$env:TEMP\7zip.msi"
          Invoke-WebRequest -Uri $url -OutFile $file
          Start-Process msiexec.exe -ArgumentList "/i `"$file`" /quiet /norestart" -Wait
          Write-Host "‚úÖ 7-Zip Instalado com sucesso."

      - name: Preparando √°rea de trabalho...
        shell: pwsh
        run: |
          $publicDesktop = "C:\Users\Public\Desktop"
          if (-not (Test-Path $publicDesktop)) { New-Item -ItemType Directory -Path $publicDesktop -Force }

          $url = "https://www.dropbox.com/scl/fi/ecfxc7fdue9wct28v3lj4/aq.zip?rlkey=9evvpzgtv3roxj0fgp44q5p2t&st=83uta0f1&dl=1"
          $zipPath = "$env:TEMP\aq.zip"

          Write-Host "==> Downloading files..."
          Invoke-WebRequest -Uri $url -OutFile $zipPath -UseBasicParsing
          Start-Sleep -Seconds 2

          Write-Host "==> Extracting files to Public Desktop..."
          $sevenZip = "${env:ProgramFiles}\7-Zip\7z.exe"
          & $sevenZip x $zipPath -o"$publicDesktop" -y

          Write-Host "‚úÖ Sua √°rea de trabalho foi preenchida com seus aplicativos/documentos!"
          
      - name: Configurar AnyDesk (instalar, definir senha e mostrar ID)
        shell: pwsh
        env:
          ANYDESK_PASSWORD: ${{ secrets.ANYDESK_PASSWORD }}   # defina no repo secrets
        run: |
          Write-Host "==> Procurando anydesk.exe na pasta Public Desktop..."
          $publicDesktop = "C:\Users\Public\Desktop"
          $anydeskPath = Get-ChildItem -Path $publicDesktop -Filter "AnyDesk*.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1

          if (-not $anydeskPath) {
            Write-Host "‚ö†Ô∏è anydesk.exe n√£o encontrado na Public Desktop. Procurando em TEMP..."
            $anydeskPath = Get-ChildItem -Path "$env:TEMP" -Filter "AnyDesk*.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          }

          if (-not $anydeskPath) {
            Write-Error "‚ùå anydesk.exe n√£o encontrado. Abortando step."
            exit 1
          }

          $anydeskExe = $anydeskPath.FullName
          Write-Host "‚úÖ Encontrado: $anydeskExe"

          # 1) Instalar/registrar AnyDesk (modo silencioso / start-with-win)
          Write-Host "==> Instalando/registrando AnyDesk (silencioso)..."
          & $anydeskExe --install "C:\Program Files\AnyDesk" --start-with-win | Out-Null
          Start-Sleep -Seconds 3

          # 2) Start service (se dispon√≠vel)
          Write-Host "==> Iniciando servi√ßo AnyDesk (se aplic√°vel)..."
          try {
            & "$env:ProgramFiles\AnyDesk\AnyDesk.exe" --start
          } catch {
            Write-Host "‚ö†Ô∏è Falha ao iniciar com --start, tentando start via arquivo encontrado..."
            & $anydeskExe --start | Out-Null
          }
          Start-Sleep -Seconds 2

          # 3) Definir senha de unattended access (usando secret)
          if (-not $env:ANYDESK_PASSWORD) {
            Write-Error "‚ùå ANYDESK_PASSWORD n√£o definido (adicione como secret do repo)."
            exit 1
          }
          Write-Host "==> Definindo senha de Unattended Access (usando secret)..."
          # o comando l√™ a senha da entrada padr√£o
          cmd /c "echo $env:ANYDESK_PASSWORD | `"$anydeskExe`" --set-password _unattended_access" 2>$null

          Start-Sleep -Seconds 2

          # 4) Obter AnyDesk ID
          Write-Host "==> Buscando AnyDesk ID..."
          $idOutput = & $anydeskExe --get-id 2>&1
          $anydeskId = ($idOutput -join "`n").Trim()
          if (-not $anydeskId) {
            Write-Error "‚ùå N√£o foi poss√≠vel obter AnyDesk ID."
            exit 1
          }
          Write-Host "‚úÖ AnyDesk ID: $anydeskId"
          "ANYDESK_ID=$anydeskId" | Out-File -FilePath $env:GITHUB_ENV -Append

          # 5) Mostrar IP Tailscale (se j√° setado)
          if ($env:TAILSCALE_IP) {
            Write-Host "üîπ Tailscale IP: $env:TAILSCALE_IP"
          } else {
            Write-Host "‚ö†Ô∏è TAILSCALE_IP n√£o definido ainda."
          }

          # 6) Imprimir resumo para console do Actions
          Write-Host "==============================="
          Write-Host "Acesso AnyDesk (use o ID + senha que voc√™ definiu)"
          Write-Host "AnyDesk ID: $anydeskId"
          Write-Host "Senha (secreta usada): (oculta no log)"
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "==============================="

      - name: SUA CONEX√ÉO
        shell: pwsh
        run: |
          Write-Host "‚úÖ UTILIZE POR 6 HORAS SEM PREOCUPA√á√ÉO!"
          Write-Host "==============================="
          Write-Host "üü¢ SUA VPS EST√Å ONLINE!"
          Write-Host "üîπ IP: $env:TAILSCALE_IP"
          Write-Host "üîπ Usu√°rio: $env:RDP_USER"
          Write-Host "üîπ Senha: (N√£o definida)"
          Write-Host "==============================="

      - name: ONLINE...
        shell: pwsh
        run: |
          Write-Host "‚è≥ Mantendo VPS ativa por 6 horas..."
          Start-Sleep -Seconds 3600
