name: RDP + AnyDesk (local EXE)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    env:
      # tempo opcional para manter a runner viva (segundos) - ajustar se quiser
      KEEP_ALIVE_SECONDS: 180

    steps:
      - name: Checkout repository (needed to access AnyDesk.exe)
        uses: actions/checkout@v4

      # ====================================================
      # 🔧 CONFIGURAÇÃO DO RDP
      # ====================================================
      - name: Enable Remote Desktop
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                            -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        shell: pwsh
        run: |
          $username = "RDP"
          $passwordPlain = "@vps123"
          $securePass = ConvertTo-SecureString $passwordPlain -AsPlainText -Force

          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Write-Host "Local user exists — updating password"
            net user $username $passwordPlain
          } else {
            New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -Description "RDP user created by workflow"
          }

          Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue

          "RDP_USER=$username" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RDP_PASS=$passwordPlain" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "✅ User $username created/updated."

      # ====================================================
      # 🌐 TAILSCALE (VPN)
      # ====================================================
      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "✅ Tailscale installed."

      - name: Connect to Tailscale
        shell: pwsh
        run: |
          Start-Process -FilePath "$env:ProgramFiles\Tailscale\tailscaled.exe"
          Start-Sleep -Seconds 5
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-runner-$env:GITHUB_RUN_ID" --accept-dns=false

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
            $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) -join ";"
            if ($tsIP) { break }
            Start-Sleep -Seconds 5
            $retries++
          }

          if (-not $tsIP) { Write-Error "❌ Tailscale IP not found"; exit 1 }

          "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "✅ Connected to Tailscale IP: $tsIP"

      # ====================================================
      # 💻 ANYDESK - INSTALAÇÃO A PARTIR DO .exe NO REPO
      # ====================================================
      - name: Install AnyDesk from repo file
        shell: pwsh
        run: |
          # caminho onde você colocou o AnyDesk.exe no repo: .github/workflows/AnyDesk.exe
          $repoExe = Join-Path $env:GITHUB_WORKSPACE ".github\workflows\AnyDesk.exe"
          Write-Host "Looking for AnyDesk installer at: $repoExe"
          if (-not (Test-Path $repoExe)) {
            Write-Error "❌ AnyDesk installer not found at expected path: $repoExe"
            exit 1
          }

          # Copia para TEMP e tenta instalação silenciosa (tentativas com flags comuns)
          $target = Join-Path $env:TEMP "AnyDesk_from_repo.exe"
          Copy-Item -Path $repoExe -Destination $target -Force

          Write-Host "Attempting silent install (common flags)..."

          # Tentar alguns argumentos silenciosos comuns — se um falhar, tenta o próximo
          $attempts = @(
            '--install --silent',
            '--install --quiet',
            '/S',
            '/quiet',
            '/silent'
          )

          $installed = $false
          foreach ($args in $attempts) {
            try {
              Write-Host "Trying: $target $args"
              Start-Process -FilePath $target -ArgumentList $args -Wait -NoNewWindow -ErrorAction Stop
              Start-Sleep -Seconds 3
              # verificar se AnyDesk foi instalado
              $possible = @(
                "${env:ProgramFiles(x86)}\AnyDesk\AnyDesk.exe",
                "${env:ProgramFiles}\AnyDesk\AnyDesk.exe"
              )
              if ($possible | Where-Object { Test-Path $_ }) {
                $installed = $true
                break
              }
            } catch {
              Write-Host "Attempt with args '$args' failed: $($_.Exception.Message)"
            }
          }

          if (-not $installed) {
            Write-Host "Could not perform silent install with standard flags. Trying to run installer without args (may require interactive confirmation)..."
            try {
              Start-Process -FilePath $target -Wait -NoNewWindow -ErrorAction Stop
              Start-Sleep -Seconds 3
            } catch {
              Write-Error "Installer run failed: $($_.Exception.Message)"
            }
          }

          # detect AnyDesk path
          $possiblePaths = @(
            "${env:ProgramFiles(x86)}\AnyDesk\AnyDesk.exe",
            "${env:ProgramFiles}\AnyDesk\AnyDesk.exe"
          )
          $anydesk = $possiblePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $anydesk) {
            Write-Error "❌ AnyDesk executable not found after install. Looked in: $($possiblePaths -join ', ')"
            exit 1
          }
          Write-Host "✅ AnyDesk installed at: $anydesk"
          "ANYDESK_PATH=$anydesk" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure AnyDesk Unattended Access
        shell: pwsh
        env:
          ANYDESK_PASS: ${{ secrets.ANYDESK_PASS }}
        run: |
          if (-not $env:ANYDESK_PASS) { throw "Secret ANYDESK_PASS is not defined." }
          $anydesk = $env:ANYDESK_PATH
          Write-Host "Applying unattended password..."
          # aplica a senha: comando pode variar por versão; esse é o padrão usado em muitos clientes AnyDesk
          echo $env:ANYDESK_PASS | & "$anydesk" --set-password _unattended_access 2>$null || Write-Host "Warning: --set-password may not be supported on this installer/version."

          Start-Sleep -Seconds 2

          Write-Host "Attempting to get AnyDesk ID..."
          $idRaw = & "$anydesk" --get-id 2>$null | Out-String
          $id = $idRaw -replace "`r","" -replace "`n","" -replace " ",""
          if (-not $id) { 
            Write-Host "ID command returned empty. Trying alternate retrieval..."
            # outra tentativa: ler arquivo de config/registro (pode variar por versão)
            $possibleReg = 'HKLM:\SOFTWARE\AnyDesk'
            try {
              $regId = (Get-ItemProperty -Path $possibleReg -ErrorAction SilentlyContinue).ClientID
              if ($regId) { $id = $regId.ToString() }
            } catch { }
          }

          if (-not $id) {
            Write-Warning "Could not determine AnyDesk ID programmatically. Check logs or open AnyDesk on the runner to inspect."
            $id = ""
          } else {
            Write-Host "✅ AnyDesk ID: $id"
          }

          "ANYDESK_ID=$id" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          # também saída do step
          "anydesk_id=$id" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      # ====================================================
      # ✅ EXIBIÇÃO FINAL
      # ====================================================
      - name: Display Connection Info
        shell: pwsh
        run: |
          Write-Host "`n==============================="
          Write-Host "🟢 VPS READY!"
          Write-Host "🔹 RDP via Tailscale:"
          Write-Host "   IP: $env:TAILSCALE_IP"
          Write-Host "   User: $env:RDP_USER"
          Write-Host "   Pass: $env:RDP_PASS"
          Write-Host ""
          Write-Host "🔹 AnyDesk Access:"
          Write-Host "   ID: $env:ANYDESK_ID"
          Write-Host "   Pass: (kept secret in ANYDESK_PASS)"
          Write-Host "==============================="

      - name: Keep Machine Alive
        shell: pwsh
        run: |
          $t = [int]$env:KEEP_ALIVE_SECONDS
          if ($t -le 0) { Write-Host "KEEP_ALIVE_SECONDS <= 0 → exiting immediately."; exit 0 }
          Write-Host "Keeping machine alive for $t seconds. Stop workflow to terminate early."
          Start-Sleep -Seconds $t
