name: RDP (no password, auto-login, keep-alive infinite)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    # Ajuste para o máximo suportado pelo GitHub Actions (72 horas = 4320 minutes).
    # OBS: Mesmo com loop infinito abaixo, o Actions pode encerrar o job ao atingir este timeout.
    timeout-minutes: 4320

    env:
      # KEEP_ALIVE_SECONDS não é mais usado — passo final é loop infinito.
      # KEEP_ALIVE_SECONDS: 600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Write-Host "==> Enabling Remote Desktop & firewall rule..."
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name "fDenyTSConnections" -Value 0 -Force

          # Optional: disable NLA if needed
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "SecurityLayer" -Value 0 -Force

          # Firewall rule for RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null || Write-Host "no existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart RDP service
          Restart-Service -Name TermService -Force
          Write-Host "✅ RDP enabled."

      - name: Create RDP user (no password) and allow blank passwords
        shell: pwsh
        run: |
          Write-Host "==> Creating user RDP without password and enabling auto-login settings..."

          $user = "RDP"

          # Create user with blank password
          if (Get-LocalUser -Name $user -ErrorAction SilentlyContinue) {
            Write-Host "User $user already exists. Ensuring blank password."
            # Try to set blank password (may fail on some images due to policy)
            cmd.exe /c "net user $user \"\"" 2>$null || Write-Host "Could not set blank password via 'net user', continuing..."
          } else {
            cmd.exe /c "net user $user \"\" /add"
          }

          # Add to Administrators and Remote Desktop Users groups
          cmd.exe /c "net localgroup Administrators $user /add" 2>$null || Write-Host "Add to Administrators may have failed or already present."
          cmd.exe /c "net localgroup \"Remote Desktop Users\" $user /add" 2>$null || Write-Host "Add to Remote Desktop Users may have failed or already present."

          # Allow blank passwords for network logon (required to permit remote logon with blank pwd)
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Lsa" /v "LimitBlankPasswordUse" /t REG_DWORD /d 0 /f

          # Configure AutoAdminLogon to automatically log in the user (auto logon)
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "AutoAdminLogon" /t REG_SZ /d "1" /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "DefaultUserName" /t REG_SZ /d "$user" /f
          # Set DefaultPassword to empty string explicitly
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "DefaultPassword" /t REG_SZ /d "" /f

          "RDP_USER=$user" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Host "✅ User $user created/updated (blank password). Auto logon configured."

      - name: Install Tailscale
        shell: pwsh
        run: |
          Write-Host "==> Installing Tailscale..."
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "✅ Tailscale installed."

      - name: Establish Tailscale Connection
        shell: pwsh
        run: |
          Write-Host "==> Starting tailscaled and connecting to Tailscale..."
          Start-Process -FilePath "$env:ProgramFiles\Tailscale\tailscaled.exe"
          Start-Sleep -Seconds 5
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-runner-$env:GITHUB_RUN_ID" --accept-dns=false

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) -join ";"
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "❌ Tailscale IP not assigned. Exiting."
              exit 1
          }

          "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "✅ Tailscale connected! IP: $tsIP"

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "==> Testing RDP connectivity via Tailscale..."
          $targetIP = $env:TAILSCALE_IP -split ';' | Select-Object -First 1
          $testResult = Test-NetConnection -ComputerName $targetIP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "❌ TCP connection to RDP port 3389 failed (Target: $targetIP)"
              exit 1
          }
          Write-Host "✅ RDP port reachable via Tailscale ($targetIP)."

      - name: Display connection info
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: (blank — auto-login enabled)"
          Write-Host "==================`n"

      - name: Maintain Connection indefinitely
        shell: pwsh
        run: |
          Write-Host "Entering indefinite keep-alive. To stop this runner, manually stop the workflow in Actions UI."
          while ($true) {
            Write-Host "[$(Get-Date)] VPS online (indefinite keep-alive)."
            Start-Sleep -Seconds 300
          }
