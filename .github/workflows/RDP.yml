name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule with the same name to avoid duplication
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "no existing rule"

          # Allow incoming RDP on port 3389
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart Remote Desktop Service to ensure changes take effect
          Restart-Service -Name TermService -Force

      - name: Create RDP User (no password / auto-login)
        shell: pwsh
        run: |
          $username = "RDP"

          # If user exists, try to ensure blank password; otherwise create with blank password.
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Write-Host "Local user '$username' already exists. Attempting to set blank password..."
            try {
              cmd.exe /c "net user $username \"\"" 2>$null
            } catch {
              Write-Host "Warning: could not set blank password via net user. Continuing..."
            }
          } else {
            Write-Host "Creating local user '$username' with blank password..."
            cmd.exe /c "net user $username \"\" /add"
          }

          # Add to required groups
          cmd.exe /c "net localgroup Administrators $username /add" 2>$null || Write-Host "Note: add to Administrators may have failed or already present."
          cmd.exe /c "net localgroup \"Remote Desktop Users\" $username /add" 2>$null || Write-Host "Note: add to Remote Desktop Users may have failed or already present."

          # Allow network logon with blank passwords
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Lsa" /v "LimitBlankPasswordUse" /t REG_DWORD /d 0 /f

          # Configure AutoAdminLogon for automatic login (no password)
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "AutoAdminLogon" /t REG_SZ /d "1" /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "DefaultUserName" /t REG_SZ /d "$username" /f

          # Explicitly set DefaultPassword to empty string (some systems expect the value)
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "DefaultPassword" /t REG_SZ /d "" /f

          # Expose env vars (password intentionally blank)
          "RDP_USER=$username" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RDP_PASS=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Host "✅ User '$username' created/updated for auto-login with blank password (if host policy allows)."

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          Write-Host "✅ Tailscale installed successfully."

      - name: Establish Tailscale Connection
        shell: pwsh
        run: |
          Write-Host "Starting Tailscale service..."
          Start-Process -FilePath "$env:ProgramFiles\Tailscale\tailscaled.exe"
          Start-Sleep -Seconds 5

          Write-Host "Connecting to Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-runner-$env:GITHUB_RUN_ID" --accept-dns=false

          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4) -join ";"
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "❌ Tailscale IP not assigned. Exiting."
              exit 1
          }

          "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "✅ Tailscale connected! IP: $tsIP"

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          Write-Host "Testing RDP connectivity..."
          $targetIP = $env:TAILSCALE_IP -split ';' | Select-Object -First 1
          $testResult = Test-NetConnection -ComputerName $targetIP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "❌ TCP connection to RDP port 3389 failed (Target: $targetIP)"
              exit 1
          }
          Write-Host "✅ RDP port reachable via Tailscale ($targetIP)."

      - name: Maintain Connection
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: (blank — auto-login enabled)"
          Write-Host "==================`n"

          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
